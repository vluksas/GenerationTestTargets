import org.ktu.examples.GeometryCalculator;
import org.junit.rules.ExpectedException;
import org.junit.Rule;
public class TestareaOfParallelogram
{
@Rule
 public final ExpectedException exception = ExpectedException.none();
/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram1() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-67.40, -22.82);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram2() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram3() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram4() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 40.72007281913292;
		double mca_height = -203.412468721785;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(-8282.970538670683, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram5() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram6() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram7() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-491.75, -210.32);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram8() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram9() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram10() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -237.1189460493247;
		double mca_height = 103.82635284510448;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(-24619.19535877648, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram11() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram12() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram13() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-226.68, -209.50);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram14() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram15() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram16() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -68.76815749411006;
		double mca_height = -242.40859126851703;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(16669.99218227873, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram17() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram18() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram19() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-90.67, 258.23);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram20() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram21() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram22() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -569.0755612658924;
		double mca_height = -506.944662258371;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(288489.8182054307, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram23() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram24() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram25() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-350.33, 15.51);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram26() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram27() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram28() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -294.8438161281357;
		double mca_height = -138.76357577445543;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(40913.58222092616, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram29() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram30() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram31() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-16.39, 6.93);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram32() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram33() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram34() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -120.48765668203524;
		double mca_height = -88.15745126418409;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(10621.884721882267, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram35() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram36() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram37() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-227.78, 175.35);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram38() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram39() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram40() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 3.3996849100857816;
		double mca_height = 106.16478322378589;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(360.92681150843305, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram41() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram42() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram43() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(80.07, -192.02);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram44() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram45() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram46() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 11.076184718738517;
		double mca_height = -233.02254833595083;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(-2581.000789000166, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram47() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram48() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram49() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(8.05, 135.90);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram50() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram51() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram52() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 30.098310160449728;
		double mca_height = -55.497085226324856;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(-1670.3684841428378, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram53() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram54() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by random generation rule. 
*/	@org.junit.Test
	public void testAreaOfParallelogram55() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();

		double res = testObject.areaOfParallelogram(-184.08, -203.74);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram56() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram57() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = -1;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  post: result = base*height " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram58() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = -182.39199799512375;
		double mca_height = -225.15890780993783;

		double res = testObject.areaOfParallelogram(mca_base, mca_height);
		org.junit.Assert.assertEquals(41067.18306185443, res, 0.001);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: base > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram59() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_base = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(mca_base, 0.00);
	};

/**
* Auto generated by an OCL generation rule. Checks whether constraint "  pre: height > 0 " is satisfied. 
*/	@org.junit.Test
	public void testAreaOfParallelogram60() throws Throwable
	{
		GeometryCalculator testObject = new GeometryCalculator();
		double mca_height = 0;
		exception.expect(Throwable.class);

		double res = testObject.areaOfParallelogram(0.00, mca_height);
	};

};
